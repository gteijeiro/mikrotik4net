//*********************************************************
//  Autogenerated 23.7.2011 22:40:45
//*********************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*
!re
=uptime=1w6d05:57:50
=version=4.16
=free-memory=488396
=total-memory=508084
=cpu=Intel(R)
=cpu-count=1
=cpu-frequency=2133
=cpu-load=0
=free-hdd-space=76744312
=total-hdd-space=76912416
=write-sect-since-reboot=169874
=write-sect-total=169874
=architecture-name=x86
=board-name=x86
=platform=MikroTik
*/
namespace Tik4Net.Objects.System
{
    /// <summary>
    /// Represents one row in /system/resource on mikrotik router.
    /// </summary>
    [TikEntity("/system/resource", TikEntityEditMode.ReadOnly)]    
    public sealed partial class SystemResource: TikEntityBase
    {
        /// <summary>
        /// Row architecture-name property.
        /// </summary>
        [TikProperty("architecture-name", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string ArchitectureName 
        { 
            get { return Properties.GetAsStringOrNull("architecture-name"); }
            // Property R/O set { Properties.SetPropertyValue("architecture-name", value); }
        }

        /// <summary>
        /// Row board-name property.
        /// </summary>
        [TikProperty("board-name", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string BoardName 
        { 
            get { return Properties.GetAsStringOrNull("board-name"); }
            // Property R/O set { Properties.SetPropertyValue("board-name", value); }
        }        	

        /// <summary>
        /// Row cpu property.
        /// </summary>
        [TikProperty("cpu", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string Cpu 
        { 
            get { return Properties.GetAsStringOrNull("cpu"); }
            // Property R/O set { Properties.SetPropertyValue("cpu", value); }
        }        	

        /// <summary>
        /// Row cpu-count property.
        /// </summary>
        [TikProperty("cpu-count", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? CpuCount 
        { 
            get { return Properties.GetAsInt64OrNull("cpu-count"); }
            // Property R/O set { Properties.SetPropertyValue("cpu-count", value); }
        }        	

        /// <summary>
        /// Row cpu-frequency property.
        /// </summary>
        [TikProperty("cpu-frequency", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? CpuFrequency 
        { 
            get { return Properties.GetAsInt64OrNull("cpu-frequency"); }
            // Property R/O set { Properties.SetPropertyValue("cpu-frequency", value); }
        }        	

        /// <summary>
        /// Row cpu-load property.
        /// </summary>
        [TikProperty("cpu-load", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? CpuLoad 
        { 
            get { return Properties.GetAsInt64OrNull("cpu-load"); }
            // Property R/O set { Properties.SetPropertyValue("cpu-load", value); }
        }        	

        /// <summary>
        /// Row free-hdd-space property.
        /// </summary>
        [TikProperty("free-hdd-space", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? FreeHddSpace 
        { 
            get { return Properties.GetAsInt64OrNull("free-hdd-space"); }
            // Property R/O set { Properties.SetPropertyValue("free-hdd-space", value); }
        }        	

        /// <summary>
        /// Row free-memory property.
        /// </summary>
        [TikProperty("free-memory", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? FreeMemory 
        { 
            get { return Properties.GetAsInt64OrNull("free-memory"); }
            // Property R/O set { Properties.SetPropertyValue("free-memory", value); }
        }        	

        /// <summary>
        /// Row platform property.
        /// </summary>
        [TikProperty("platform", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string Platform 
        { 
            get { return Properties.GetAsStringOrNull("platform"); }
            // Property R/O set { Properties.SetPropertyValue("platform", value); }
        }        	

        /// <summary>
        /// Row total-hdd-space property.
        /// </summary>
        [TikProperty("total-hdd-space", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? TotalHddSpace 
        { 
            get { return Properties.GetAsInt64OrNull("total-hdd-space"); }
            // Property R/O set { Properties.SetPropertyValue("total-hdd-space", value); }
        }        	

        /// <summary>
        /// Row total-memory property.
        /// </summary>
        [TikProperty("total-memory", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? TotalMemory 
        { 
            get { return Properties.GetAsInt64OrNull("total-memory"); }
            // Property R/O set { Properties.SetPropertyValue("total-memory", value); }
        }        	

        /// <summary>
        /// Row uptime property.
        /// </summary>
        [TikProperty("uptime", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string Uptime 
        { 
            get { return Properties.GetAsStringOrNull("uptime"); }
            // Property R/O set { Properties.SetPropertyValue("uptime", value); }
        }        	

        /// <summary>
        /// Row version property.
        /// </summary>
        [TikProperty("version", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string Version 
        { 
            get { return Properties.GetAsStringOrNull("version"); }
            // Property R/O set { Properties.SetPropertyValue("version", value); }
        }        	

        /// <summary>
        /// Row write-sect-since-reboot property.
        /// </summary>
        [TikProperty("write-sect-since-reboot", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? WriteSectSinceReboot 
        { 
            get { return Properties.GetAsInt64OrNull("write-sect-since-reboot"); }
            // Property R/O set { Properties.SetPropertyValue("write-sect-since-reboot", value); }
        }        	

        /// <summary>
        /// Row write-sect-total property.
        /// </summary>
        [TikProperty("write-sect-total", typeof(long?), true, TikPropertyEditMode.ReadOnly)]
        public long? WriteSectTotal 
        { 
            get { return Properties.GetAsInt64OrNull("write-sect-total"); }
            // Property R/O set { Properties.SetPropertyValue("write-sect-total", value); }
        }        	
    }
    
    /// <summary>
    /// Represents list of rows in /system/resource on mikrotik router.
    /// </summary>    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]    
    public sealed partial class SystemResourceList : TikSingleRowList<SystemResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemResourceList"/> class.
        /// Default active session (<see cref="TikSession.ActiveSession"/> is used).
        /// </summary>
        public SystemResourceList() 
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemResourceList"/> class.
        /// </summary>
        /// <param name="session">The session used to access mikrotik.</param>
        public SystemResourceList(TikSession session)
            : base(session)
        {
        }
    }           
}