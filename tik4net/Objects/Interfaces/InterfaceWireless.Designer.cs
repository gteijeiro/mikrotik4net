//*********************************************************
//  Autogenerated 29.10.2011 16:49:30
//*********************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*
!re
=.id=*4
=name=wlan1 - 5_NE_Vych
=mtu=1500
=l2mtu=2290
=mac-address=00:C0:CA:1D:A3:1D
=arp=enabled
=interface-type=Atheros AR5213
=mode=ap-bridge
=ssid=vaslepsi.net_czfree_jenstejnNE_V
=frequency=5180
=band=5ghz-a
=channel-width=20mhz
=scan-list=default
=wireless-protocol=802.11
=antenna-mode=ant-a
=wds-mode=disabled
=wds-default-bridge=none
=wds-ignore-ssid=false
=bridge-mode=enabled
=default-authentication=true
=default-forwarding=true
=default-ap-tx-limit=0
=default-client-tx-limit=0
=hide-ssid=false
=security-profile=jenstejn-wpa
=compression=false
=running=true
=disabled=false
*/
namespace Tik4Net.Objects.Interfaces
{
    /// <summary>
    /// Represents one row in /interface/wireless on mikrotik router.
    /// </summary>
    [TikEntity("/interface/wireless", TikEntityEditMode.Editable, Tik4Net.Connector.ExecuteReaderBehaviors.None)]    
    public sealed partial class InterfaceWireless: TikEntityBase , ITikEntityWithId
    {
        /// <summary>
        /// Row .id property.
        /// </summary>
        [TikProperty(".id", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string Id 
        { 
            get { return Properties.GetAsStringOrNull(".id"); }
            // Property R/O set { Properties.SetPropertyValue(".id", value); }
        }

        /// <summary>
        /// Row antenna-mode property.
        /// </summary>
        [TikProperty("antenna-mode", typeof(string), false, TikPropertyEditMode.Editable)]
        public string AntennaMode 
        { 
            get { return Properties.GetAsStringOrNull("antenna-mode"); }
            set { Properties.SetPropertyValue("antenna-mode", value); }
        }        	

        /// <summary>
        /// Row arp property.
        /// </summary>
        [TikProperty("arp", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Arp 
        { 
            get { return Properties.GetAsStringOrNull("arp"); }
            set { Properties.SetPropertyValue("arp", value); }
        }        	

        /// <summary>
        /// Row band property.
        /// </summary>
        [TikProperty("band", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Band 
        { 
            get { return Properties.GetAsStringOrNull("band"); }
            set { Properties.SetPropertyValue("band", value); }
        }        	

        /// <summary>
        /// Row bridge-mode property.
        /// </summary>
        [TikProperty("bridge-mode", typeof(string), false, TikPropertyEditMode.Editable)]
        public string BridgeMode 
        { 
            get { return Properties.GetAsStringOrNull("bridge-mode"); }
            set { Properties.SetPropertyValue("bridge-mode", value); }
        }        	

        /// <summary>
        /// Row compression property.
        /// </summary>
        [TikProperty("compression", typeof(bool?), false, TikPropertyEditMode.Editable)]
        public bool? Compression 
        { 
            get { return Properties.GetAsBooleanOrNull("compression"); }
            set { Properties.SetPropertyValue("compression", value); }
        }        	

        /// <summary>
        /// Row default-ap-tx-limit property.
        /// </summary>
        [TikProperty("default-ap-tx-limit", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? DefaultApTxLimit 
        { 
            get { return Properties.GetAsInt64OrNull("default-ap-tx-limit"); }
            set { Properties.SetPropertyValue("default-ap-tx-limit", value); }
        }        	

        /// <summary>
        /// Row default-authentication property.
        /// </summary>
        [TikProperty("default-authentication", typeof(bool?), false, TikPropertyEditMode.Editable)]
        public bool? DefaultAuthentication 
        { 
            get { return Properties.GetAsBooleanOrNull("default-authentication"); }
            set { Properties.SetPropertyValue("default-authentication", value); }
        }        	

        /// <summary>
        /// Row default-client-tx-limit property.
        /// </summary>
        [TikProperty("default-client-tx-limit", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? DefaultClientTxLimit 
        { 
            get { return Properties.GetAsInt64OrNull("default-client-tx-limit"); }
            set { Properties.SetPropertyValue("default-client-tx-limit", value); }
        }        	

        /// <summary>
        /// Row default-forwarding property.
        /// </summary>
        [TikProperty("default-forwarding", typeof(bool?), false, TikPropertyEditMode.Editable)]
        public bool? DefaultForwarding 
        { 
            get { return Properties.GetAsBooleanOrNull("default-forwarding"); }
            set { Properties.SetPropertyValue("default-forwarding", value); }
        }        	

        /// <summary>
        /// Row disabled property.
        /// </summary>
        [TikProperty("disabled", typeof(bool), true, TikPropertyEditMode.Editable)]
        public bool Disabled 
        { 
            get { return Properties.GetAsBoolean("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }        	

        /// <summary>
        /// Row disabled property variant that could be used for bindings (doesn't throw exceptions when not set - underlying property is madatory).
        /// Use <see cref="Disabled"/> in other cases.
        /// </summary>
        public bool? DisabledOrNull 
        { 
            get { return Properties.GetAsBooleanOrNull("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }   
                
        /// <summary>
        /// Gets a value indicating whether <see cref="Disabled"/> property has been set.
        /// </summary>
        /// <value><c>true</c> if <see cref="Disabled"/> has been set; otherwise, <c>false</c>.</value>        
        public bool DisabledIsSet
        {
            get { return Properties.ContainsAssignedProperty("disabled"); }
        }        

        /// <summary>
        /// Row frequency property.
        /// </summary>
        [TikProperty("frequency", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? Frequency 
        { 
            get { return Properties.GetAsInt64OrNull("frequency"); }
            set { Properties.SetPropertyValue("frequency", value); }
        }        	

        /// <summary>
        /// Row hide-ssid property.
        /// </summary>
        [TikProperty("hide-ssid", typeof(bool?), false, TikPropertyEditMode.Editable)]
        public bool? HideSsid 
        { 
            get { return Properties.GetAsBooleanOrNull("hide-ssid"); }
            set { Properties.SetPropertyValue("hide-ssid", value); }
        }        	

        /// <summary>
        /// Row channel-width property.
        /// </summary>
        [TikProperty("channel-width", typeof(string), false, TikPropertyEditMode.Editable)]
        public string ChannelWidth 
        { 
            get { return Properties.GetAsStringOrNull("channel-width"); }
            set { Properties.SetPropertyValue("channel-width", value); }
        }        	

        /// <summary>
        /// Row interface-type property.
        /// </summary>
        [TikProperty("interface-type", typeof(string), false, TikPropertyEditMode.Editable)]
        public string InterfaceType 
        { 
            get { return Properties.GetAsStringOrNull("interface-type"); }
            set { Properties.SetPropertyValue("interface-type", value); }
        }        	

        /// <summary>
        /// Row l2mtu property.
        /// </summary>
        [TikProperty("l2mtu", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? L2mtu 
        { 
            get { return Properties.GetAsInt64OrNull("l2mtu"); }
            set { Properties.SetPropertyValue("l2mtu", value); }
        }        	

        /// <summary>
        /// Row mac-address property.
        /// </summary>
        [TikProperty("mac-address", typeof(string), false, TikPropertyEditMode.Editable)]
        public string MacAddress 
        { 
            get { return Properties.GetAsStringOrNull("mac-address"); }
            set { Properties.SetPropertyValue("mac-address", value); }
        }        	

        /// <summary>
        /// Row mode property.
        /// </summary>
        [TikProperty("mode", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Mode 
        { 
            get { return Properties.GetAsStringOrNull("mode"); }
            set { Properties.SetPropertyValue("mode", value); }
        }        	

        /// <summary>
        /// Row mtu property.
        /// </summary>
        [TikProperty("mtu", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? Mtu 
        { 
            get { return Properties.GetAsInt64OrNull("mtu"); }
            set { Properties.SetPropertyValue("mtu", value); }
        }        	

        /// <summary>
        /// Row name property.
        /// </summary>
        [TikProperty("name", typeof(string), true, TikPropertyEditMode.Editable)]
        public string Name 
        { 
            get { return Properties.GetAsString("name"); }
            set { Properties.SetPropertyValue("name", value); }
        }        	

        /// <summary>
        /// Row name property variant that could be used for bindings (doesn't throw exceptions when not set - underlying property is madatory).
        /// Use <see cref="Name"/> in other cases.
        /// </summary>
        public string NameOrNull 
        { 
            get { return Properties.GetAsStringOrNull("name"); }
            set { Properties.SetPropertyValue("name", value); }
        }   
                
        /// <summary>
        /// Gets a value indicating whether <see cref="Name"/> property has been set.
        /// </summary>
        /// <value><c>true</c> if <see cref="Name"/> has been set; otherwise, <c>false</c>.</value>        
        public bool NameIsSet
        {
            get { return Properties.ContainsAssignedProperty("name"); }
        }        

        /// <summary>
        /// Row running property.
        /// </summary>
        [TikProperty("running", typeof(bool?), false, TikPropertyEditMode.ReadOnly)]
        public bool? Running 
        { 
            get { return Properties.GetAsBooleanOrNull("running"); }
            // Property R/O set { Properties.SetPropertyValue("running", value); }
        }        	

        /// <summary>
        /// Row scan-list property.
        /// </summary>
        [TikProperty("scan-list", typeof(string), false, TikPropertyEditMode.Editable)]
        public string ScanList 
        { 
            get { return Properties.GetAsStringOrNull("scan-list"); }
            set { Properties.SetPropertyValue("scan-list", value); }
        }        	

        /// <summary>
        /// Row security-profile property.
        /// </summary>
        [TikProperty("security-profile", typeof(string), false, TikPropertyEditMode.Editable)]
        public string SecurityProfile 
        { 
            get { return Properties.GetAsStringOrNull("security-profile"); }
            set { Properties.SetPropertyValue("security-profile", value); }
        }        	

        /// <summary>
        /// Row ssid property.
        /// </summary>
        [TikProperty("ssid", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Ssid 
        { 
            get { return Properties.GetAsStringOrNull("ssid"); }
            set { Properties.SetPropertyValue("ssid", value); }
        }        	

        /// <summary>
        /// Row wds-default-bridge property.
        /// </summary>
        [TikProperty("wds-default-bridge", typeof(string), false, TikPropertyEditMode.Editable)]
        public string WdsDefaultBridge 
        { 
            get { return Properties.GetAsStringOrNull("wds-default-bridge"); }
            set { Properties.SetPropertyValue("wds-default-bridge", value); }
        }        	

        /// <summary>
        /// Row wds-ignore-ssid property.
        /// </summary>
        [TikProperty("wds-ignore-ssid", typeof(bool?), false, TikPropertyEditMode.Editable)]
        public bool? WdsIgnoreSsid 
        { 
            get { return Properties.GetAsBooleanOrNull("wds-ignore-ssid"); }
            set { Properties.SetPropertyValue("wds-ignore-ssid", value); }
        }        	

        /// <summary>
        /// Row wds-mode property.
        /// </summary>
        [TikProperty("wds-mode", typeof(string), false, TikPropertyEditMode.Editable)]
        public string WdsMode 
        { 
            get { return Properties.GetAsStringOrNull("wds-mode"); }
            set { Properties.SetPropertyValue("wds-mode", value); }
        }        	

        /// <summary>
        /// Row wireless-protocol property.
        /// </summary>
        [TikProperty("wireless-protocol", typeof(string), false, TikPropertyEditMode.Editable)]
        public string WirelessProtocol 
        { 
            get { return Properties.GetAsStringOrNull("wireless-protocol"); }
            set { Properties.SetPropertyValue("wireless-protocol", value); }
        }        	
    }
    
    /// <summary>
    /// Represents list of rows in /interface/wireless on mikrotik router.
    /// </summary>    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]    
    public sealed partial class InterfaceWirelessList : TikUnorderedList<InterfaceWireless> , IEditableTikList
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceWirelessList"/> class.
        /// Default active session (<see cref="TikSession.ActiveSession"/> is used).
        /// </summary>
        public InterfaceWirelessList() 
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceWirelessList"/> class.
        /// </summary>
        /// <param name="session">The session used to access mikrotik.</param>
        public InterfaceWirelessList(TikSession session)
            : base(session)
        {
        }

		        /// <summary>
        /// Saves this instance - saves all entities that are in <see cref="TikEntityBase.IsModified"/>, 
        /// <see cref="TikEntityBase.IsMarkedDeleted"/> and <see cref="TikEntityBase.IsMarkedNew"/> states.
        /// Uses session from constructor.
        /// </summary>        
        public void Save()
        {
			SaveInternal();
		}        

	}           
}