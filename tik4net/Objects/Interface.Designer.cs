//*********************************************************
//  Autogenerated 23.7.2011 22:40:47
//*********************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*
!re
=.id=*8
=name=danik
=type=pptp-in
=dynamic=false
=running=false
=disabled=false
=comment=
*/
namespace Tik4Net.Objects
{
    /// <summary>
    /// Represents one row in /interface on mikrotik router.
    /// </summary>
    [TikEntity("/interface", TikEntityEditMode.Editable)]    
    public sealed partial class Interface: TikEntityBase
    {
        /// <summary>
        /// Row comment property.
        /// </summary>
        [TikProperty("comment", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Comment 
        { 
            get { return Properties.GetAsStringOrNull("comment"); }
            set { Properties.SetPropertyValue("comment", value); }
        }

        /// <summary>
        /// Row disabled property.
        /// </summary>
        [TikProperty("disabled", typeof(bool), true, TikPropertyEditMode.Editable)]
        public bool Disabled 
        { 
            get { return Properties.GetAsBoolean("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }        	

        /// <summary>
        /// Row disabled property variant that could be used for bindings (doesn't throw exceptions when not set - underlying property is madatory).
        /// Use <see cref="Disabled"/> in other cases.
        /// </summary>
        public bool? DisabledOrNull 
        { 
            get { return Properties.GetAsBooleanOrNull("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }   
                
        /// <summary>
        /// Gets a value indicating whether <see cref="Disabled"/> property has been set.
        /// </summary>
        /// <value><c>true</c> if <see cref="Disabled"/> has been set; otherwise, <c>false</c>.</value>        
        public bool DisabledIsSet
        {
            get { return Properties.ContainsAssignedProperty("disabled"); }
        }        

        /// <summary>
        /// Row dynamic property.
        /// </summary>
        [TikProperty("dynamic", typeof(bool?), false, TikPropertyEditMode.Editable)]
        public bool? Dynamic 
        { 
            get { return Properties.GetAsBooleanOrNull("dynamic"); }
            set { Properties.SetPropertyValue("dynamic", value); }
        }        	

        /// <summary>
        /// Row l2mtu property.
        /// </summary>
        [TikProperty("l2mtu", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? L2mtu 
        { 
            get { return Properties.GetAsInt64OrNull("l2mtu"); }
            set { Properties.SetPropertyValue("l2mtu", value); }
        }        	

        /// <summary>
        /// Row mtu property.
        /// </summary>
        [TikProperty("mtu", typeof(long?), false, TikPropertyEditMode.Editable)]
        public long? Mtu 
        { 
            get { return Properties.GetAsInt64OrNull("mtu"); }
            set { Properties.SetPropertyValue("mtu", value); }
        }        	

        /// <summary>
        /// Row name property.
        /// </summary>
        [TikProperty("name", typeof(string), true, TikPropertyEditMode.Editable)]
        public string Name 
        { 
            get { return Properties.GetAsString("name"); }
            set { Properties.SetPropertyValue("name", value); }
        }        	

        /// <summary>
        /// Row name property variant that could be used for bindings (doesn't throw exceptions when not set - underlying property is madatory).
        /// Use <see cref="Name"/> in other cases.
        /// </summary>
        public string NameOrNull 
        { 
            get { return Properties.GetAsStringOrNull("name"); }
            set { Properties.SetPropertyValue("name", value); }
        }   
                
        /// <summary>
        /// Gets a value indicating whether <see cref="Name"/> property has been set.
        /// </summary>
        /// <value><c>true</c> if <see cref="Name"/> has been set; otherwise, <c>false</c>.</value>        
        public bool NameIsSet
        {
            get { return Properties.ContainsAssignedProperty("name"); }
        }        

        /// <summary>
        /// Row running property.
        /// </summary>
        [TikProperty("running", typeof(bool?), false, TikPropertyEditMode.ReadOnly)]
        public bool? Running 
        { 
            get { return Properties.GetAsBooleanOrNull("running"); }
            // Property R/O set { Properties.SetPropertyValue("running", value); }
        }        	

        /// <summary>
        /// Row type property.
        /// </summary>
        [TikProperty("type", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Type 
        { 
            get { return Properties.GetAsStringOrNull("type"); }
            set { Properties.SetPropertyValue("type", value); }
        }        	
    }
    
    /// <summary>
    /// Represents list of rows in /interface on mikrotik router.
    /// </summary>    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]    
    public sealed partial class InterfaceList : TikUnorderedList<Interface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceList"/> class.
        /// Default active session (<see cref="TikSession.ActiveSession"/> is used).
        /// </summary>
        public InterfaceList() 
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceList"/> class.
        /// </summary>
        /// <param name="session">The session used to access mikrotik.</param>
        public InterfaceList(TikSession session)
            : base(session)
        {
        }
    }           
}