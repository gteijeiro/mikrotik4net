//*********************************************************
//  Autogenerated 23.7.2011 22:40:47
//*********************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*
!re
=.id=*2
=address=10.43.94.197/28
=network=10.43.94.192
=broadcast=10.43.94.207
=interface=eth1_LAN_Budka
=actual-interface=eth1_LAN_Budka
=invalid=false
=dynamic=false
=disabled=false
=comment=
*/
namespace Tik4Net.Objects.Ip
{
    /// <summary>
    /// Represents one row in /ip/address on mikrotik router.
    /// </summary>
    [TikEntity("/ip/address", TikEntityEditMode.Editable)]    
    public sealed partial class IpAddress: TikEntityBase
    {
        /// <summary>
        /// Row actual-interface property.
        /// </summary>
        [TikProperty("actual-interface", typeof(string), false, TikPropertyEditMode.ReadOnly)]
        public string ActualInterface 
        { 
            get { return Properties.GetAsStringOrNull("actual-interface"); }
            // Property R/O set { Properties.SetPropertyValue("actual-interface", value); }
        }

        /// <summary>
        /// Row address property.
        /// </summary>
        [TikProperty("address", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Address 
        { 
            get { return Properties.GetAsStringOrNull("address"); }
            set { Properties.SetPropertyValue("address", value); }
        }        	

        /// <summary>
        /// Row broadcast property.
        /// </summary>
        [TikProperty("broadcast", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Broadcast 
        { 
            get { return Properties.GetAsStringOrNull("broadcast"); }
            set { Properties.SetPropertyValue("broadcast", value); }
        }        	

        /// <summary>
        /// Row comment property.
        /// </summary>
        [TikProperty("comment", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Comment 
        { 
            get { return Properties.GetAsStringOrNull("comment"); }
            set { Properties.SetPropertyValue("comment", value); }
        }        	

        /// <summary>
        /// Row disabled property.
        /// </summary>
        [TikProperty("disabled", typeof(bool), true, TikPropertyEditMode.Editable)]
        public bool Disabled 
        { 
            get { return Properties.GetAsBoolean("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }        	

        /// <summary>
        /// Row disabled property variant that could be used for bindings (doesn't throw exceptions when not set - underlying property is madatory).
        /// Use <see cref="Disabled"/> in other cases.
        /// </summary>
        public bool? DisabledOrNull 
        { 
            get { return Properties.GetAsBooleanOrNull("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }   
                
        /// <summary>
        /// Gets a value indicating whether <see cref="Disabled"/> property has been set.
        /// </summary>
        /// <value><c>true</c> if <see cref="Disabled"/> has been set; otherwise, <c>false</c>.</value>        
        public bool DisabledIsSet
        {
            get { return Properties.ContainsAssignedProperty("disabled"); }
        }        

        /// <summary>
        /// Row dynamic property.
        /// </summary>
        [TikProperty("dynamic", typeof(bool?), false, TikPropertyEditMode.ReadOnly)]
        public bool? Dynamic 
        { 
            get { return Properties.GetAsBooleanOrNull("dynamic"); }
            // Property R/O set { Properties.SetPropertyValue("dynamic", value); }
        }        	

        /// <summary>
        /// Row interface property.
        /// </summary>
        [TikProperty("interface", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Interface 
        { 
            get { return Properties.GetAsStringOrNull("interface"); }
            set { Properties.SetPropertyValue("interface", value); }
        }        	

        /// <summary>
        /// Row invalid property.
        /// </summary>
        [TikProperty("invalid", typeof(bool?), false, TikPropertyEditMode.ReadOnly)]
        public bool? Invalid 
        { 
            get { return Properties.GetAsBooleanOrNull("invalid"); }
            // Property R/O set { Properties.SetPropertyValue("invalid", value); }
        }        	

        /// <summary>
        /// Row network property.
        /// </summary>
        [TikProperty("network", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Network 
        { 
            get { return Properties.GetAsStringOrNull("network"); }
            set { Properties.SetPropertyValue("network", value); }
        }        	
    }
    
    /// <summary>
    /// Represents list of rows in /ip/address on mikrotik router.
    /// </summary>    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]    
    public sealed partial class IpAddressList : TikUnorderedList<IpAddress>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpAddressList"/> class.
        /// Default active session (<see cref="TikSession.ActiveSession"/> is used).
        /// </summary>
        public IpAddressList() 
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IpAddressList"/> class.
        /// </summary>
        /// <param name="session">The session used to access mikrotik.</param>
        public IpAddressList(TikSession session)
            : base(session)
        {
        }
    }           
}