//*********************************************************
//  Autogenerated 29.10.2011 16:49:29
//*********************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*
!re
=.id=*1
=list=VOIP
=address=10.43.100.172
=dynamic=false
=disabled=false
=comment=VOIP telefony (maji specialni queue s vysokou prioritou)
*/
namespace Tik4Net.Objects.Ip.Firewall
{
    /// <summary>
    /// Represents one row in /ip/firewall/address-list on mikrotik router.
    /// </summary>
    [TikEntity("/ip/firewall/address-list", TikEntityEditMode.Editable, Tik4Net.Connector.ExecuteReaderBehaviors.None)]    
    public sealed partial class FirewallAddressList: TikEntityBase , ITikEntityWithId
    {
        /// <summary>
        /// Row .id property.
        /// </summary>
        [TikProperty(".id", typeof(string), true, TikPropertyEditMode.ReadOnly)]
        public string Id 
        { 
            get { return Properties.GetAsStringOrNull(".id"); }
            // Property R/O set { Properties.SetPropertyValue(".id", value); }
        }

        /// <summary>
        /// Row address property.
        /// </summary>
        [TikProperty("address", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Address 
        { 
            get { return Properties.GetAsStringOrNull("address"); }
            set { Properties.SetPropertyValue("address", value); }
        }        	

        /// <summary>
        /// Row comment property.
        /// </summary>
        [TikProperty("comment", typeof(string), false, TikPropertyEditMode.Editable)]
        public string Comment 
        { 
            get { return Properties.GetAsStringOrNull("comment"); }
            set { Properties.SetPropertyValue("comment", value); }
        }        	

        /// <summary>
        /// Row disabled property.
        /// </summary>
        [TikProperty("disabled", typeof(bool), true, TikPropertyEditMode.Editable)]
        public bool Disabled 
        { 
            get { return Properties.GetAsBoolean("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }        	

        /// <summary>
        /// Row disabled property variant that could be used for bindings (doesn't throw exceptions when not set - underlying property is madatory).
        /// Use <see cref="Disabled"/> in other cases.
        /// </summary>
        public bool? DisabledOrNull 
        { 
            get { return Properties.GetAsBooleanOrNull("disabled"); }
            set { Properties.SetPropertyValue("disabled", value); }
        }   
                
        /// <summary>
        /// Gets a value indicating whether <see cref="Disabled"/> property has been set.
        /// </summary>
        /// <value><c>true</c> if <see cref="Disabled"/> has been set; otherwise, <c>false</c>.</value>        
        public bool DisabledIsSet
        {
            get { return Properties.ContainsAssignedProperty("disabled"); }
        }        

        /// <summary>
        /// Row dynamic property.
        /// </summary>
        [TikProperty("dynamic", typeof(bool?), true, TikPropertyEditMode.ReadOnly)]
        public bool? Dynamic 
        { 
            get { return Properties.GetAsBooleanOrNull("dynamic"); }
            // Property R/O set { Properties.SetPropertyValue("dynamic", value); }
        }        	

        /// <summary>
        /// Row list property.
        /// </summary>
        [TikProperty("list", typeof(string), false, TikPropertyEditMode.Editable)]
        public string List 
        { 
            get { return Properties.GetAsStringOrNull("list"); }
            set { Properties.SetPropertyValue("list", value); }
        }        	
    }
    
    /// <summary>
    /// Represents list of rows in /ip/firewall/address-list on mikrotik router.
    /// </summary>    
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]    
    public sealed partial class FirewallAddressListList : TikUnorderedList<FirewallAddressList> , IEditableTikList
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirewallAddressListList"/> class.
        /// Default active session (<see cref="TikSession.ActiveSession"/> is used).
        /// </summary>
        public FirewallAddressListList() 
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FirewallAddressListList"/> class.
        /// </summary>
        /// <param name="session">The session used to access mikrotik.</param>
        public FirewallAddressListList(TikSession session)
            : base(session)
        {
        }

		        /// <summary>
        /// Saves this instance - saves all entities that are in <see cref="TikEntityBase.IsModified"/>, 
        /// <see cref="TikEntityBase.IsMarkedDeleted"/> and <see cref="TikEntityBase.IsMarkedNew"/> states.
        /// Uses session from constructor.
        /// </summary>        
        public void Save()
        {
			SaveInternal();
		}        

	}           
}